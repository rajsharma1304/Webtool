/*<Copyright> Celstream Technologies Pvt. Ltd. </Copyright>
 <ProjectName>SICT</ProjectName>
 <FileName> viewform.js </FileName>
 <Author> Raghavendra G.N, Akhilesh M.S </Author>
 <CreatedOn>15 Jan 2015</CreatedOn>*/
var departureForms;
var depTable;
var downloadTimeout;
var formData = {
    FormFilters: {},
    isValid: false
};
var startIndex, offset, sortType, isAsc, searchVal;
var viewFormsMessage = {
    exportSuccess : 'Report successfully exported',
    exportFail : 'Sorry, eporting report failed.',
    initiateDownload : 'Please wait, while we initiate the download process...',
    successfulInitiation : 'Download successfully initiated, please wait till the button is enabled...',
    waitForDownload : 'Please wait, the download is in progress...',
    downloadError : 'Sorry, an error occoured while downloading, please try again later.',
    downloadSuccess: 'The download has been success, please click on button to export the file.',
};

function getDataForDT() {
    var uri = getJsonInfoAction(VIEWFORMS);
    depTable = $('#departureTable').DataTable({
        "bProcessing": true,
        "bServerSide": true,
        "aLengthMenu": [20, 50, 100],
        "iDisplayLength": 50,
        "pagingType": "simple",
        "order": [[4, "desc"]],
        "sAjaxSource": uri,
        "initComplete": function() {
            $("#departureTable_filter input").off().on('keyup', function(e) {
                if (e.keyCode == 13)
                    //[#72591] User is getting the reports even for the space entered in the search text field.
                    depTable.search(this.value.trim()).draw();
            });
        },
        "fnServerData": function(sSource, aoData, fnCallback) {
            cnter = aoData[0].value;
            selectedAirportID = $('#AirportList').val();
            var sValue = aoData[45].value, fValue = aoData[47].value, IsASC = aoData[48].value === "asc" ? true : false;
            switch (fValue) {
                case 0:
                    fValue = "Interviewer";
                    break;
                case 1:
                    fValue = "Airline";
                    break;
                case 2:
                    fValue = "FlightNumber";
                    break;
                case 3:
                    fValue = "Destination";
                    break;
                case 4:
                    fValue = "DistributionDate";
                    break;
                case 5:
                    fValue = "LastUpdatedDate";
                    break;
                default:
                    fValue = "Interviewer";
                    break;
            }
            startIndex = aoData[3].value, offset = aoData[4].value, searchVal = sValue, isAsc = IsASC, sortType = fValue;
            var postData = {
                "Version": "V1",
                "SessionId": sessionStorage.sessionId,
                "Instance": getInstance(),
                "DepartureFormFilterDetails": {
                    "StartIndex": aoData[3].value,
                    "OffSet": aoData[4].value,
                    "IsDepartureForm": isGlobal ? '-1' : isDeparture.toString(),
                    "AirportId": selectedAirportID,
                    "FilterValue": sValue,
                    "Sort": fValue,
                    "IsSortByAsc": IsASC
                }
            };
            var postExcelData = {
                "Version": "V1",
                "SessionId": sessionStorage.sessionId,
                "Instance": getInstance(),
                "FormFilterDetails": {
                    "StartIndex": aoData[3].value,
                    "OffSet": aoData[4].value,
                    "IsDepartureForm": isGlobal ? '-1' : isDeparture.toString(),
                    "AirportId": selectedAirportID,
                    "FilterValue": sValue,
                    "Sort": fValue,
                    "IsSortByAsc": IsASC
                }
            };
            if (formData.isValid)
                postData.DepartureFormFilterDetails.FormFilters = formData.FormFilters;

            if (formData.forExport) {
                postExcelData.FormFilterDetails.FormFilters = formData.FormFilters;
                postExportParameters(getJsonInfoAction(GLOBALEXPORT), postExcelData);
            }

            $.ajax({
                "type": "POST",
                "contentType": "application/json",
                "url": sSource,
                "data": JSON.stringify(postData),
                "success": function(msg) {
                    fnCallback(
                            {
                                "sEcho": cnter,
                                "iTotalRecords": msg.GetDepartureFormDetailsResult.TotalRecords,
                                "iTotalDisplayRecords": msg.GetDepartureFormDetailsResult.TotalRecords,
                                "aaData": msg.GetDepartureFormDetailsResult.DepartureFormDetails === null ?
                                        [] : msg.GetDepartureFormDetailsResult.DepartureFormDetails
                            });
                }
            })
                    .fail(function(result) {
                        console.log(result);
                    });
        },
        "columns": getColumns(),
        aoColumnDefs: [
            {
                "aTargets": [3],
                "mRender": function(data, type, full) {
                    if (isGlobal) {
                        if (data === 'D')
                                return 'Departure';
                            else
                                return 'Arrival';
                    } else {
                        return data;
                    }
                }
            },
            {
                "aTargets": isGlobal ? [5] : [4],
                "mRender": function(data, type, full) {
                    if ((data === null) || (data === undefined) || (data.length == 0)) {
                        return '';
                    } else {
                        return moment(data).format("MM/DD/YYYY");
                    }
                }
            },
            {
                "aTargets": isGlobal ? [6] : [5],
                "mRender": function(data, type, full) {
                    if ((data === null) || (data === undefined) || (data.length == 0)) {
                        return '';
                    } else {
                        return moment(data).format("DD-MMM-YYYY");
                    }
                }
            },
            {
                "bSortable": false,
                "aTargets": isGlobal ? [7] : [6],
                "mRender": function(data, type, full) {
                    if ((data === null) || (data === 'undefined') || (data.length == 0)) {
                        return '';
                    } else {
                        var languageString = '';
                        for (var i = 0; i < data.length; i++) {
                            languageString += '<span>' + airportUtil.languageName(data[i].LanguageId) + '</span><span>' + data[i].FirstSerialNo + '</span><span>' + data[i].LastSerialNo + '</span>';
                            if ((i + 1) < data.length)
                                languageString += '<br>';
                        }
                        return languageString;
                    }
                }
            },
            {
                "bSortable": false,
                "aTargets": [7],
                "mRender": function(data, type, full) {
                    $('body').data(data.toString(), full);
                    return '<a href="#editAirlinePopUp" data-toggle="modal" data-backdrop="static"  onclick="callEditAirlines(this,' + data + ')" class="sepDelEdit ttip_t" title="Edit Form Entry"><i class="fa fa-pencil-square-o fa-lg btnColor"></i></a>' +
                            '<a href="javascript:void(0);" onclick="callDeleteAirline(this, ' + data + ')" title="Delete Form Entry"  class="sepDelEdit ttip_t" ><i class="fa fa-trash fa-lg btnColor"></i></a>';
                }
            }
        ]
    });
}

function getColumns() {
    if (isGlobal) {
        return   [
            {"data": "Interviewer", sWidth: '15%'},
            {"data": "Airline", sWidth: '15%'},
            {"data": "FlightNumber", sWidth: '5%'},
            {"data": "Type", sWidth: '5%'},
            {"data": "Destination", sWidth: '15%'},
            {"data": "DistributionDate", "sType": "eu_date", sWidth: '5%'},
            {"data": "LastUpdatedDate", "sType": "eu_date", sWidth: '5%'},
            {"data": "Languages", "sClass": "tblSpan"},
        ]
    } else {
        return   [
            {"data": "Interviewer", sWidth: '15%'},
            {"data": "Airline", sWidth: '15%'},
            {"data": "FlightNumber", sWidth: '5%'},
            {"data": "Destination", sWidth: '15%'},
            {"data": "DistributionDate", "sType": "eu_date", sWidth: '5%'},
            {"data": "LastUpdatedDate", "sType": "eu_date", sWidth: '5%'},
            {"data": "Languages", "sClass": "tblSpan"},
            {"data": "FormId"}
        ]
    }
}

$('#departureTable').on('draw.dt', function() {
    gebo_tips.init();
});

var cnter = 0,
        slRI = 0,
        needToClear = true; //  Flag to show the success sticky message
var callViewDepForm = function(callback, uri) {
    var postData = {
        "Version": "V1",
        "SessionId": sessionStorage.sessionId,
        "Instance": getInstance(),
        "DepartureFormFilterDetails": {
            "StartIndex": "0",
            "OffSet": "100"
        }
    };

    $.ajax({
        type: "POST",
        url: uri,
        data: JSON.stringify(postData),
        contentType: "application/json" // content type sent to server
    }).done(function(result) {
        departureForms = result;
        result.sEcho = ++cnter;
        result.iTotalRecords = result.GetDepartureFormDetailsResult.TotalRecords;
        result.iTotalDisplayRecords = result.GetDepartureFormDetailsResult.TotalRecords;
        callback({data: result.GetDepartureFormDetailsResult.DepartureFormDetails});
    })
            .fail(function(result) {
                console.log(result);
            });
}

function callEditAirlines(ele, data) {
    var sEle;
    needToClear = true;
    sEle = $('body').data(data.toString());
    var tr = $(ele).closest('tr');
    var row = depTable.row(tr);
    slRI = row.index();
    if (null !== sEle && 'undefined' !== sEle) {
        $('body').data('EditedForm', sEle);
        var template = jQuery.validator.format($.trim((newformDeparture.newAirline('show'))));
        $('#editAirlineBody').empty().append($(template(1)));
        //  Init the validations
        //  Populate the user preference
        var sOpt = $('#airlinesDD1')[0].options;
        for (var i = 0; i < sOpt.length; i++) {
            if (sOpt[i].value === sEle.AirlineId.toString()) {
                sOpt[i].selected = true;
                callOnAirlinesChange(1);
                break;
            }
        }
        var sDOpt = $('#destination1')[0].options;
        for (var i = 0; i < sDOpt.length; i++) {
            if (sDOpt[i].value === sEle.DestinationId.toString()) {
                sDOpt[i].selected = true;
                break;
            }
        }
        //Aircraft Type
        if($('#aircrafttype1').length > 0){
            var sairCraftOpt = $('#aircrafttype1')[0].options;
            for (var i = 0; i < sairCraftOpt.length; i++) {
                if (sairCraftOpt[i].value === sEle.AircraftType.toString()) {
                    sairCraftOpt[i].selected = true;
                    break;
                }
            }
        }
        var cnt = sEle.Languages.length - 1;
        while (cnt > 0) {
            $('button.btn.sepH_b.btn-pink.addLanguage')[0].click();
            --cnt;
        }
        for (var i = 0; i < sEle.Languages.length; i++) {
            $('#fserial1_' + (i + 1).toString()).val(sEle.Languages[i].FirstSerialNo);
            $('#lserial1_' + (i + 1).toString()).val(sEle.Languages[i].LastSerialNo);
            var sLOpt = $('#language1_' + (i + 1).toString())[0].options;
            for (var x = 0; x < sLOpt.length; x++) {
                if (sLOpt[x].value === sEle.Languages[i].LanguageId.toString()) {
                    sLOpt[x].selected = true;
                    break;
                }
            }
        }

        //$('#flight1').val(sEle.FlightNumber.match(/\d+/)[0]); //  Airlines with code U2 will not work
        $('#flight1').val(sEle.FlightNumber.substring(2));
        $('#businesscard1').val(sEle.BusinessCards);
        newformDeparture.handleFocusIn();
        newformDeparture.checkValueisNumber('');
        //  Intialize the fields working date and format the flight so that they can allign properly
        var fieldWorkString =
                '<div class="input-append date span3" id="fieldworkDate" style="margin-left: -24px;">' +
                '<label>Fieldwork Date</label><input type="text" name="fieldworkdate" class="span8" readonly>' +
                '<span class="add-on"><i class="splashy-calendar_day_up"></i></span></div>';
        $('#businesscard1').parent().after(fieldWorkString);
        $('#flight1').parent().attr('style', 'margin-left: 24px;');

        //Intialize FieldWork with today's date.
        $('#fieldworkDate').datepicker({
            format: "mm/dd/yyyy",
            autoclose: true,
            orientation: "top left",
            todayHighlight: true,
            startDate: newformDeparture.fieldWorkRange.START,
            endDate: newformDeparture.fieldWorkRange.END
        }).on('changeDate', function(ev) {
            if ($('#fieldworkDate').valid()) {
                $('#fieldworkDate').parent('div').removeClass('sict_error');
            }
            else {
                $('#fieldworkDate').parent('div').addClass('sict_error');
            }
        }).datepicker();
        $('#fieldworkDate').datepicker().data('date', moment(sEle.DistributionDate).format('MM/DD/YYYY'));
        $('#fieldworkDate input').val(moment(sEle.DistributionDate).format('MM/DD/YYYY'));

        $('#editAirlinePopUp').on('hidden.bs.modal', function(e) {
            if (needToClear)
                pageHelper.clearStickies();
        })
    }
}

function callDeleteAirline(ele, id) {
    smoke.confirm('Are you sure you want to delete?', function(e) {
        if (e) {
            var tr = $(ele).closest('tr');
            var row = depTable.row(tr);
            var rowIndex = row.index();
            var uri = getJsonInfoAction(VIEWFORMSDELETE);
            var postData = {
                "Version": "V1",
                "SessionId": sessionStorage.sessionId,
                "FormId": id
            };
            ajaxPost(uri, postData, '', deleteAirline, rowIndex, '', 'DELETE');
        }
    });
}

function deleteAirline(data, success, rowIndex) {
    if (success)
        smoke.alert('Airline deleted successfully!');
    depTable.row(rowIndex).remove().draw(false);
}

function callPopUpClose(data) {
    if (null !== data && undefined !== data) {
        var d = depTable.row(slRI).data();
        d.FlightNumber = data.Airlines[0].FlightNumber;
        d.Languages = data.Airlines[0].Languages;
        d.BCardsDistributed = data.Airlines[0].BCardsDistributed;
        depTable.row(slRI).data(d);
        depTable.row(slRI).invalidate().draw();
        pageHelper.notify(newFormMessages.SUCCESS_AIRLINE_UPDATE, pageHelper.stickyPosition.top.RIGHT, pageHelper.stickyTypes.SUCCESS);
        needToClear = false;
    }
    $('#popUpClose').click();
}

function updateFormEntries(ele) {
    var sEle = $('body').data('EditedForm');
    validator.updateForm(ele, sEle, callPopUpClose);
}

function callViewFormsPage() {
    var selectedAirportID = $('#AirportList').val();
    cacheMgr.selectedAirport(selectedAirportID);
    $('#formInterviewerDD').empty().append(airportUtil.interviewerListOptions());
    $('#formAirlinesDD').empty().append(airportUtil.airlineListOptions(isDeparture));
    if (isDeparture)
        $('#formDestinationDD').empty().append('<option value="-1">-- Please select destination --</option>');
    else
        $('#formDestinationDD').empty().append('<option value="-1">-- Please select origin --</option>');
}

function initialiseViewForms() {
    $('#dp_start').datepicker({format: "mm/dd/yyyy"}).on('changeDate', function(ev) {
        var dateText = $(this).data('date');

        var endDateTextBox = $('#dp_end input');
        if (endDateTextBox.val() != '') {
            var testStartDate = new Date(dateText);
            var testEndDate = new Date(endDateTextBox.val());
            if (testStartDate > testEndDate) {
                endDateTextBox.val(dateText);
            }
        }
        else {
            endDateTextBox.val(dateText);
        }
        $('#dp_end').datepicker('setStartDate', dateText);
        $('#dp_start').datepicker('hide');
    });
    $('#dp_end').datepicker({format: "mm/dd/yyyy"}).on('changeDate', function(ev) {
        var dateText = $(this).data('date');
        var startDateTextBox = $('#dp_start input');
        if (startDateTextBox.val() != '') {
            var testStartDate = new Date(startDateTextBox.val());
            var testEndDate = new Date(dateText);
            if (testStartDate > testEndDate) {
                startDateTextBox.val(dateText);
            }
        }
        else {
            startDateTextBox.val(dateText);
        }
        $('#dp_start').datepicker('setEndDate', dateText);
        $('#dp_end').datepicker('hide');
    });

    $('#formInterviewerDD').empty().append(airportUtil.interviewerListOptions);
    $('#formAirlinesDD').empty().append(airportUtil.airlineListOptions(isDeparture));
    if (isDeparture)
        $('#formDestinationDD').empty().append('<option value="-1">-- Please select destination --</option>');
    else
        $('#formDestinationDD').empty().append('<option value="-1">-- Please select origin --</option>');
}

function callFormAirlinesChange() {
    var airlineVsProps = cacheMgr.airlineList(isDeparture);
    var airlineId = parseInt(document.getElementById("formAirlinesDD").value);
    if (isDeparture)
        var airlineDestinatons = '<option value="-1">-- Please select destination --</option>';
    else
        var airlineDestinatons = '<option value="-1">-- Please select origin --</option>';
    if (-1 !== airlineId) {
        for (var j = 0; j < airlineVsProps.length; j++) {
            if (airlineId === airlineVsProps[j].id) {
                airlineVsProps[j].destinations.sort(function(a, b) { return (a).destName.localeCompare((b).destName) });
                for (var k = 0; k < airlineVsProps[j].destinations.length; k++)
                    airlineDestinatons += '<option value=' + airlineVsProps[j].destinations[k].destId + '>' + airlineVsProps[j].destinations[k].destName + '</option>';
                break;
            }
        }
    }
    $('#formDestinationDD').empty().append(airlineDestinatons);
}

function updateViewForms() {
    //Code to collapse the filter accordian.
    $('#formHdr').toggle('200');
    $('#generateViewForms').parents().find('#parentDiv').find('i').removeClass('fa-arrow-circle-up').addClass('fa-arrow-circle-down');
    $('#parentDiv').removeClass('formSep');

    //Code to update the filter to the post data object.
    var formFilters = {};
    formFilters.AirlineId = $('#formAirlinesDD').val();
    formFilters.DestinationId = $('#formDestinationDD').val();
    formFilters.FlightNumber = $('#formFlightNo').val();
    formFilters.InterviewerId = $('#formInterviewerDD').val();
    var date = $('#dp_start').data('date');
    formFilters.StartDate = date === undefined ? null : pageUtils.returnServerDate(date);
    var date = $('#dp_end').data('date');
    formFilters.EndDate = date === undefined ? null : pageUtils.returnServerDate(date);
    formData.FormFilters = formFilters;
    formData.isValid = true;
    formData.forExport = false;

    //Call the DataTable draw function to redraw with the new parameters.
    depTable.draw();
}

function exportGlobalForms() {
    //Code to update the filter to the post data object.
    var FormData = {}, 
        FormFilterDetails = {}, 
        FormFilters = {}, 
        airline = $('#formAirlinesDD option:selected'),
        destination = $('#formDestinationDD option:selected'),
        interviewer = $('#formInterviewerDD option:selected'),
        airport = $('#AirportList option:selected');
    
    FormData.Version = communion.Version;
    FormData.SessionId = sessionStorage.sessionId;
    FormData.Instance = getInstance();
    
    FormFilterDetails.StartIndex = startIndex;
    FormFilterDetails.OffSet = offset;
    FormFilterDetails.IsDepartureForm = isGlobal ? '-1' : isDeparture.toString();
    FormFilterDetails.AirportId = airport.val();
    FormFilterDetails.FilterValue = searchVal;
    FormFilterDetails.Sort = sortType;
    FormFilterDetails.IsSortByAsc = isAsc;
    
    FormFilters.AirlineId = airline.val();
    FormFilters.DestinationId = $('#formDestinationDD').val();
    FormFilters.FlightNumber = $('#formFlightNo').val();
    FormFilters.InterviewerId = interviewer.val();
    FormFilters.AirlineName = airline.val() === "-1" ? null : airline.text();
    FormFilters.DestinationName = destination.val() === "-1" ? null : destination.text();
    FormFilters.AirportName = airport.val() === "-1" ? null : airport.text();
    FormFilters.InterviewerName = interviewer.val() === "-1" ? null : interviewer.text();
    var startDate = $('#dp_start').data('date');
    FormFilters.StartDate = startDate === undefined ? null : pageUtils.returnServerDate(startDate);
    var endDate = $('#dp_end').data('date');
    FormFilters.EndDate = endDate === undefined ? null : pageUtils.returnServerDate(endDate);
    
    FormFilterDetails.FormFilters = FormFilters;
    FormData.FormFilterDetails = FormFilterDetails;
    
    var uri = getJsonInfoAction(GLOBALEXPORT);
    pageHelper.clearStickies();
    pageHelper.addSmokeSignal(viewFormsMessage.initiateDownload);
    ajaxPost(uri, FormData, '', checkExportStatus, '', '', 'POST');
   
}

function checkExportStatus(data, success){
    if(success){
        if(data.DownloadFormDetailsResult.ReturnCode === 1){
            $('#spinnerIndicator').show();
            $('#exportViewForms').prop('disabled',true);
            pageHelper.removeSmokeSignal();
            pageHelper.notify(viewFormsMessage.successfulInitiation, pageHelper.stickyPosition.top.RIGHT, pageHelper.stickyTypes.INFO);

            var uri = getJsonInfoAction(CHECKEXPORTSTATUS) + '/' + data.DownloadFormDetailsResult.FileName;
            downloadTimeout = setInterval(function (){ajaxPost(uri, '', '', confirmDownloadSuccess, data.DownloadFormDetailsResult.FileLink, '', 'GET');}, 15000);
        }else{
            pageHelper.removeSmokeSignal();
            pageHelper.notify(viewFormsMessage.downloadError, pageHelper.stickyPosition.top.RIGHT, pageHelper.stickyTypes.INFO);
        }
    }
}

function confirmDownloadSuccess(data, success, fileLink){
    if(success){
        if(data.IsDownloadComplete){
            var inputString = '<a href="'+ fileLink + '"> Click to Download</a>';
            $('#exportViewForms').attr('onclick','enableExportButton()');
            $('#exportViewForms').unbind().off().bind('click','enableExportButton');
            $('#spinnerIndicator').hide();
            $('#exportViewForms').prop('disabled',false).html(inputString);
            pageHelper.addSmokeSignal(viewFormsMessage.downloadSuccess);
            setTimeout('pageHelper.removeSmokeSignal()',2000);
            clearInterval(downloadTimeout);
        }else{
            pageHelper.notify(viewFormsMessage.waitForDownload, pageHelper.stickyPosition.top.RIGHT, pageHelper.stickyTypes.INFO);
        }
    }else{
        pageHelper.notify(viewFormsMessage.downloadError, pageHelper.stickyPosition.top.RIGHT, pageHelper.stickyTypes.INFO);
    }
}

function enableExportButton(){
    
    pageHelper.notify(viewFormsMessage.exportSuccess, pageHelper.stickyPosition.top.RIGHT, pageHelper.stickyTypes.INFO);
    $('#exportViewForms').prop('disabled',false).html('').text('Export Forms').attr('onclick','exportGlobalForms()');;
    
}

function postExportParameters(url, data) {
    $.ajax({
        "type": "POST",
        "contentType": "application/json",
        "url": url,
        "data": JSON.stringify(data),
        "success": function(res) {
            if (res && res.DownloadFormDetailsResult && res.DownloadFormDetailsResult.ReturnCode === 1) {
                $("#forDwnld").attr("href", encodeURI(res.DownloadFormDetailsResult.Path));
                $("#forDwnld").attr("download", encodeURI(res.DownloadFormDetailsResult.Path).substring(encodeURI(res.DownloadFormDetailsResult.Path).lastIndexOf("/") + 1, (encodeURI(res.DownloadFormDetailsResult.Path).lastIndexOf("."))));
                document.getElementById('forDwnld').click();
            }
        }
    }).fail(function(result) {
        console.log(result);
    });
}
